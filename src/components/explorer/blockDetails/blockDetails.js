import { Link } from "react-router-dom";
import React, { useEffect, useState } from "react";
import { exactPath } from "@utils/getNetwork";
import { apiV2 } from "@constants/networks";
import { routes } from "@constants";
import { getDateAndTimeFromValue } from "@utils/datetime";
import Box from "@tools/box";
import BoxHeader from "@tools/box/header";
import BoxContent from "@tools/box/content";
import CopyToClipboard from "@tools/copyToClipboard";
import Feedback from "@tools/feedback/feedback";
import LabeledValue from "@tools/labeledValue";
import PhaeAmount from "@subcomponents/phaeAmount";
import TransactionsTable from "@subcomponents/transactionsTable";
import { truncateAddress } from "@utils/account";
import AccountVisual from "@tools/accountVisual";
import styles from "./blockDetails.css";
import http from "@utils/http";
import _ from "lodash";
import { getPrefix } from "@utils/phae";
import LoadingScreen from "@subcomponents/loadingScreen/loadingScreen";
import NavSimple from "@subcomponents/navigationBars/navBar/NavSimple";

const prefix = getPrefix();

const getFields = (data, token, currentHeight) => ({
  id: {
    label: "Block ID",
    value: (
      <CopyToClipboard
        text={truncateAddress(data?.id)}
        value={data?.id}
        className="tx-id"
        containerProps={{
          size: "xs",
          className: "copy-title",
        }}
        copyClassName={styles.copyIcon}
      />
    ),
  },
  height: {
    label: "Height",
    value: <CopyToClipboard value={data?.height} />,
  },
  date: {
    label: "Timestamp",
    value: data?.timestamp && getDateAndTimeFromValue(data?.timestamp),
  },
  confirmations: {
    label: "Confirmations",
    value: currentHeight ? currentHeight - data?.height : "-",
  },
  version: {
    label: "Version",
    value: data?.version,
  },
  generator: {
    label: "Generated by",
    value: (
      <Link
        className={styles.generator}
        to={`${routes.account.path}?address=${data?.generatorAddress}`}
      >
        <AccountVisual
          className={`${styles.avatar} text-white`}
          address={data?.generatorAddress}
          size={30}
        />
        <span className="text-white">{data?.generatorUsername}</span>
      </Link>
    ),
  },
  totalForged: {
    label: "Total forged",
    value: <PhaeAmount val={data?.totalForged} token={token} />,
  },
  reward: {
    label: "Reward",
    value: <PhaeAmount val={data?.reward} token={token} />,
  },
  totalBurnt: {
    label: "Total burnt",
    value: <PhaeAmount val={data?.totalBurnt} token={token} />,
  },
  totalFee: {
    label: "Total fee",
    value: <PhaeAmount val={data?.totalFee} token={token} />,
  },
});

const Rows = ({ data, currentHeight }) => {
  const token = prefix;
  const fields = getFields(data, token, currentHeight);

  const columns = Object.keys(fields).map((field) => (
    <LabeledValue
      key={field}
      label={fields[field].label}
      className={`${styles.dataRow} text-white`}
    >
      {fields[field].value}
    </LabeledValue>
  ));

  return <div className={styles.dataContainer}>{columns}</div>;
};

const BlockDetails = (props) => {
  const [blocksData, setBlocksData] = useState([]);
  const [transactionData, setTransactionData] = useState([]);
  const [currentHeight, setCurrentHeight] = useState(0);
  const [offset, setOffset] = useState(0);
  const [id, setId] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [loadMore, setLoadMore] = useState(false);
  const [loadLess, setLoadLess] = useState(false);
  const [paginatedTransaction, setPaginatedTransaction] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [pages, setPages] = useState(1);
  const [pageSize] = useState(10);

  const basePath = exactPath();

  const fetchData = async (newPage, pay) => {
    var regexHeight = /\d+/g;
    var loc = window.location.hash;

    const search = props.location.search;
    const params = new URLSearchParams(search);
    const id = params.get('id');
    const height = params.get('height');

    var blockheight = loc.includes("block?height")
      ? height.match(regexHeight)
      : "";
    var blockid = loc.includes("block?id") ? id : "";
    const payload = {
      blockId: blockid,
    };

    const payloadID = {
      height: blockheight[0],
    };

    const response = await http({
      path: "blocks",
      baseUrl: `${basePath}${apiV2}`,
      params: blockheight ? payloadID : payload,
    });
    setBlocksData(response?.data[0]);
    setId(response?.data[0]?.id);
    setIsLoading(false);

    fetchTransaction(response?.data[0]?.id, newPage);
  };

  const fetchBlock = async () => {
    const response = await http({
      path: "blocks",
      baseUrl: `${basePath}${apiV2}`,
    });
    setCurrentHeight(response.data[0].height);
    setIsLoading(false);
  };

  const fetchTransaction = async (id, page, pay) => {
    const payload = {
      blockId: id,
      limit: 100,
    };
    const response = await http({
      path: "transactions",
      baseUrl: `${basePath}${apiV2}`,
      params: pay ? pay : payload,
    });
    setPages(
      _.range(
        page ? page : 1,
        page
          ? (response?.data ? Math.ceil(response?.data.length) / pageSize : 0) +
          page
          : (response?.data ? Math.ceil(response?.data.length) / pageSize : 0) +
          1
      )
    );
    if (response?.meta.total > 10) {
      setTransactionData(response);
      setPaginatedTransaction(
        _(response?.data).slice(0).take(pageSize).value()
      );
      setIsLoading(false);
      setLoadMore(false);
      setLoadLess(false);
    } else {
      setTransactionData(response);
      setPaginatedTransaction(response?.data);
      setLoadMore(false);
      setLoadLess(false);
      setIsLoading(false);
    }
  };

  const loadMoreData = () => {
    setLoadMore(true);
    const endData =
      transactionData.meta.count + transactionData.meta.offset ==
      transactionData.meta.total;
    const newPage = pages[pages.length - 1] + 1;
    setOffset(offset + 100);
    setCurrentPage(newPage);
    const pay = {
      blockId: id,
      limit: 100,
      offset: endData ? 0 : offset + 100,
    };
    fetchTransaction(id, newPage, pay);
  };

  const handeGoBack = () => {
    setLoadLess(true);
    let oldpage = pages[0] - 10;
    setCurrentPage(oldpage);
    setOffset(offset - 100);
    const pay = {
      blockId: id,
      limit: 100,
      offset: offset >= 100 ? offset - 100 : offset < 0 ? 0 : 0,
    };
    fetchTransaction(id, oldpage, pay);
  };

  const pagination = (pageNo) => {
    setCurrentPage(pageNo);
    const startIndex = pageNo * pageSize;
    const page = (startIndex % 100) / 10;
    const newIndex = (page - 1) * pageSize;
    const transPage = _(transactionData.data)
      .slice(newIndex)
      .take(pageSize)
      .value();
    setPaginatedTransaction(transPage);
  };

  useEffect(() => {
    fetchData();
    fetchBlock();
  }, []);

  return (
    <>
      {isLoading ?
        <LoadingScreen />
        : ""}
      <NavSimple />
      <div style={{ width: "95%", margin: "auto" }}>
        <Box isLoading={isLoading} width="full">
          <BoxHeader>
            <h1 className="text-white">
              <i
                title="Back"
                className="far fa-arrow-alt-circle-left fa-lg p-2"
                style={{ cursor: "pointer" }}
                onClick={() => window.history.go(-1)}
              />
              Block details
            </h1>
          </BoxHeader>
          <BoxContent>
            {blocksData.error ? (
              <Feedback
                message={"Failed to load block details."}
                status="error"
              />
            ) : (
              <Rows
                data={blocksData}
                currentHeight={currentHeight ? currentHeight : ""}
              />
            )}
          </BoxContent>
        </Box>
      </div>
      <div
        className={
          paginatedTransaction && paginatedTransaction[0] ? "" : "pb-3"
        }
      >
        <TransactionsTable
          style={{ width: "100%" }}
          title={"Transactions"}
          transactions={paginatedTransaction}
          emptyState={{
            message: "There are no transactions for this block.",
          }}
        />
      </div>
      {paginatedTransaction && paginatedTransaction[0] ? (
        <nav className="d-flex py-2 justify-content-center">
          <ul className="pagination m-0">
            <li className="page-item mr-2">
              <p
                // disabled={currentPage == pages[0]}
                className={
                  currentPage == pages[0]
                    ? "page-link m-0 text-secondary bg-dark border border-dark"
                    : "page-link m-0 text-white bg-dark border border-dark"
                }
                onClick={() => pagination(pages[0])}
                style={{
                  cursor: "pointer",
                }}
              >
                First
              </p>
            </li>

            <li className="page-item mr-2">
              <i
                disabled={currentPage == pages[0]}
                className={
                  currentPage == pages[0]
                    ? "page-link fas fa-chevron-left m-0 text-secondary bg-dark border border-dark"
                    : "page-link fas fa-chevron-left m-0 text-white bg-dark border border-dark"
                }
                style={{
                  padding: "9.5px",
                  cursor: "pointer",
                }}
                onClick={() =>
                  currentPage == pages[0]
                    ? handeGoBack
                    : pagination(currentPage - 1)
                }
              />
            </li>

            {transactionData?.meta?.offset != 0 && currentPage > 10 ? (
              <li className={loadLess ? "d-none" : "page-item"} id="prev-data">
                <p
                  className={
                    currentPage == pages.length
                      ? "page-link m-0 text-secondary bg-dark border border-dark"
                      : "page-link m-0 text-white bg-dark border border-dark"
                  }
                  style={{
                    cursor: "pointer",
                  }}
                  disabled={open}
                  onClick={handeGoBack}
                >
                  ..
                </p>
              </li>
            ) : (
              ""
            )}

            {pages && pages.length > 0
              ? pages.map((page) => (
                <li
                  key={page}
                  className={
                    page === currentPage ? "page-item active" : "page-item"
                  }
                >
                  <p
                    className={
                      page === currentPage
                        ? "page-link m-0 text-white bg-secondary border border-secondary"
                        : "page-link m-0 text-white bg-dark border border-dark"
                    }
                    style={{ cursor: "pointer" }}
                    onClick={() => pagination(page)}
                  >
                    {page}
                  </p>
                </li>
              ))
              : ""}

            {transactionData.meta &&
              transactionData.meta.count + transactionData.meta.offset ==
              transactionData.meta.total ? (
              ""
            ) : (
              <li className={loadMore ? "d-none" : "page-item"} id="next-data">
                <p
                  className={
                    "page-link m-0 text-white bg-dark border border-dark"
                  }
                  style={{
                    cursor: "pointer",
                  }}
                  onClick={loadMoreData}
                >
                  ..
                </p>
              </li>
            )}

            <li className="page-item ml-2">
              <i
                className={
                  currentPage == pages[pages.length - 1]
                    ? "page-link fas fa-chevron-right m-0 text-secondary bg-dark border border-dark"
                    : "page-link fas fa-chevron-right m-0 text-white bg-dark border border-dark"
                }
                style={{
                  padding: "9.5px",
                  cursor: "pointer",
                }}
                disabled={currentPage == pages[pages.length - 1]}
                onClick={() =>
                  currentPage == pages[pages.length - 1]
                    ? undefined
                    : pagination(currentPage + 1)
                }
              />
            </li>

            <li className="page-item ml-2">
              <p
                className={
                  currentPage == pages[pages.length - 1]
                    ? "page-link m-0 text-secondary bg-dark border border-dark"
                    : "page-link m-0 text-white bg-dark border border-dark"
                }
                onClick={() => pagination(pages[pages.length - 1])}
                style={{
                  cursor: "pointer",
                }}
              >
                Last
              </p>
            </li>
          </ul>
        </nav>
      ) : (
        ""
      )}
    </>
  );
};

export default BlockDetails;
